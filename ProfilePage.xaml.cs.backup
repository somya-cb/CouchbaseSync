using AppSync.Models;
using AppSync.Services;
using System.Collections.ObjectModel;
using Couchbase.Lite.Sync;
using Couchbase.Lite;

namespace AppSync.Views;

public partial class ProfilePage : ContentPage
{
    public ObservableCollection<Profile> Profiles { get; set; } = new();
    public Command<Profile> EditCommand { get; }
    public Command<Profile> DeleteCommand { get; }
    private bool _isLoadingProfiles = false;

    public ProfilePage()
    {
        try
        {
            InitializeComponent();
            BindingContext = this;

            EditCommand = new Command<Profile>(EditProfile);
            DeleteCommand = new Command<Profile>(DeleteProfile);

            LoadProfiles();
            SetupRealTimeSyncListener();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ProfilePage initialization error: {ex.Message}");
            throw;
        }
    }

    private void SetupRealTimeSyncListener()
    {
        try
        {
            var syncService = App.GetSyncService();
            if (syncService != null)
            {
                syncService.Replicator.AddDocumentReplicationListener(OnDocumentSyncChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up sync listener: {ex.Message}");
        }
    }

    private void OnDocumentSyncChanged(object? sender, DocumentReplicationEventArgs e)
    {
        // Refresh UI only for incoming changes from server
        if (!e.IsPush && e.Documents.Count > 0)
        {
            MainThread.InvokeOnMainThreadAsync(async () =>
            {
                try
                {
                    // Brief delay to ensure database consistency
                    await Task.Delay(200);
                    
                    if (!_isLoadingProfiles)
                    {
                        LoadProfiles();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error in sync listener: {ex.Message}");
                }
            });
        }
    }

    private async void LoadProfiles()
    {
        if (_isLoadingProfiles) return;
        
        try
        {
            _isLoadingProfiles = true;
            var couchbaseService = App.GetCouchbaseService();
            if (couchbaseService != null)
            {
                var docs = await Task.Run(() => couchbaseService.GetAllProfiles());
                
                MainThread.BeginInvokeOnMainThread(() =>
                {
                    Profiles.Clear();
                    foreach (var doc in docs)
                    {
                        Profiles.Add(doc);
                    }
                    
                    // // Update employee count display
                    // if (FindByName("CountLabel") is Label countLabel)
                    // {
                    //     countLabel.Text = $"{Profiles.Count} employees";
                    // }
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profiles: {ex.Message}");
        }
        finally
        {
            _isLoadingProfiles = false;
        }
    }

    private async void EditProfile(Profile profile)
    {
        try
        {
            var editPage = new EditProfilePage(profile);
            await Navigation.PushAsync(editPage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error navigating to edit: {ex.Message}");
            await DisplayAlert("Error", "Failed to open edit page", "OK");
        }
    }

    private async void DeleteProfile(Profile profile)
    {
        try
        {
            if (string.IsNullOrEmpty(profile.Id))
            {
                await DisplayAlert("Error", $"Cannot delete {profile.Name}: Profile has no ID", "OK");
                return;
            }

            var confirm = await DisplayAlert("Delete", $"Delete {profile.Name} (ID: {profile.Id})?", "Yes", "No");
            if (confirm)
            {
                var couchbaseService = App.GetCouchbaseService();
                if (couchbaseService != null)
                {
                    await Task.Run(() => couchbaseService.DeleteProfile(profile.Id));
                    Profiles.Remove(profile);
                }
                else
                {
                    await DisplayAlert("Error", "Database service not available", "OK");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting profile {profile.Id}: {ex.Message}");
            await DisplayAlert("Error", $"Failed to delete {profile.Name}", "OK");
        }
    }

    protected override void OnAppearing()
    {
        base.OnAppearing();
        LoadProfiles();
        
        // MainThread.BeginInvokeOnMainThread(() =>
        // {
        //     if (FindByName("CountLabel") is Label countLabel)
        //     {
        //         countLabel.Text = $"{Profiles.Count} employees";
        //     }
        // });
    }

    private async void OnLogoutClicked(object sender, EventArgs e)
    {
        var confirm = await DisplayAlert("Logout", "Are you sure?", "Yes", "No");
        if (confirm)
        {
            Microsoft.Maui.Storage.Preferences.Remove("IsLoggedIn");
            Microsoft.Maui.Storage.Preferences.Remove("Username");
            Application.Current.MainPage = new Views.LoginPage();
        }
    }
}